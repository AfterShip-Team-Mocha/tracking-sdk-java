/*
 * This code was auto generated by AfterShip SDK Generator.
 * Do not edit the class manually.
 */
package com.aftership.last_checkpoint;

import com.aftership.base.Fetcher;
import com.aftership.constant.ErrorEnum;
import com.aftership.exception.ApiException;
import com.aftership.http.*;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import java.util.HashMap;
import java.util.Map;
import com.aftership.http.Request;
import com.aftership.model.GetCheckpointByTrackingIdResponse;
import com.aftership.base.Page;

import com.aftership.model.GetCheckpointByTrackingIdResponse;

public class GetCheckpointByTrackingIdFetcher extends Fetcher<GetCheckpointByTrackingIdResponse> {
    private final Map<String, String> headerParams= new HashMap<>(8);

    public GetCheckpointByTrackingIdFetcher addHeaderParam(final String name, final String value) {
        if (value == null || value.equals("null")) {
            return this;
        }

        if (!headerParams.containsKey(name)) {
            headerParams.put(name, value);
        }
        return this;
    }

    private void setHeaderParams(final Request request) {
        for (final Map.Entry<String, String> entry : headerParams.entrySet()) {
            request.addHeaderParam(entry.getKey(), entry.getValue());
        }
    }
     private String fields;

     private String lang;

    private String tracking_id;


    public GetCheckpointByTrackingIdFetcher setFields(String fields) {
        this.fields = fields;
        return this;
    }

    public GetCheckpointByTrackingIdFetcher setLang(String lang) {
        this.lang = lang;
        return this;
    }

    public GetCheckpointByTrackingIdFetcher setTrackingId(String tracking_id) {
        this.tracking_id = tracking_id;
        return this;
    }

    @Override
    public GetCheckpointByTrackingIdResponse fetch(AfterShipClient client) throws Exception {
        if (tracking_id == null || tracking_id.isEmpty()) {
            throw new ApiException(ErrorEnum.BAD_REQUEST.getCode(), ErrorEnum.BAD_REQUEST.getMessage() + ": `tracking_id` is invalid");
        }
        String path = String.format("/tracking/2024-04/last_checkpoint/%s", tracking_id);
        Request request = new Request(HttpMethod.GET, path);
        addQueryParams(request);
        setHeaderParams(request);
        Response response = client.request(request);
        AfterShipResponse<GetCheckpointByTrackingIdResponse> trackingResponse = new Gson().fromJson(response.getContent(), new TypeToken<AfterShipResponse<GetCheckpointByTrackingIdResponse>>() {
            }.getType());
        return trackingResponse.getData();

    }

    private void addQueryParams(final Request request) {
        if (fields != null) {
            request.addQueryParam("fields", fields);
        }
        if (lang != null) {
            request.addQueryParam("lang", lang);
        }

    }
}
